// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: client.sql

package sqlc

import (
	"context"
)

const createClient = `-- name: CreateClient :one
INSERT INTO clients (
  id,
  first_name,
  middle_name,
  last_name,
  full_name,
  email,
  message
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, first_name, middle_name, last_name, full_name, email, message, created_at, updated_at
`

type CreateClientParams struct {
	ID         string `json:"id"`
	FirstName  string `json:"first_name"`
	MiddleName string `json:"middle_name"`
	LastName   string `json:"last_name"`
	FullName   string `json:"full_name"`
	Email      string `json:"email"`
	Message    string `json:"message"`
}

func (q *Queries) CreateClient(ctx context.Context, arg CreateClientParams) (Client, error) {
	row := q.db.QueryRowContext(ctx, createClient,
		arg.ID,
		arg.FirstName,
		arg.MiddleName,
		arg.LastName,
		arg.FullName,
		arg.Email,
		arg.Message,
	)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.FullName,
		&i.Email,
		&i.Message,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteClient = `-- name: DeleteClient :exec
DELETE FROM clients
WHERE id = $1
`

func (q *Queries) DeleteClient(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteClient, id)
	return err
}

const getClient = `-- name: GetClient :one
SELECT id, first_name, middle_name, last_name, full_name, email, message, created_at, updated_at FROM clients
`

func (q *Queries) GetClient(ctx context.Context) (Client, error) {
	row := q.db.QueryRowContext(ctx, getClient)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.FullName,
		&i.Email,
		&i.Message,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listClients = `-- name: ListClients :many
SELECT id, first_name, middle_name, last_name, full_name, email, message, created_at, updated_at FROM clients
ORDER BY created_at DESC
`

func (q *Queries) ListClients(ctx context.Context) ([]Client, error) {
	rows, err := q.db.QueryContext(ctx, listClients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Client{}
	for rows.Next() {
		var i Client
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.MiddleName,
			&i.LastName,
			&i.FullName,
			&i.Email,
			&i.Message,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
