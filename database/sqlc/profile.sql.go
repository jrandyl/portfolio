// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: profile.sql

package sqlc

import (
	"context"
)

const createProfile = `-- name: CreateProfile :one
INSERT INTO profiles (
  id,
  user_id,
  first_name,
  middle_name,
  last_name,
  full_name,
  email,
  contact_number
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, user_id, first_name, middle_name, last_name, full_name, email, contact_number, created_at, updated_at
`

type CreateProfileParams struct {
	ID            string `json:"id"`
	UserID        string `json:"user_id"`
	FirstName     string `json:"first_name"`
	MiddleName    string `json:"middle_name"`
	LastName      string `json:"last_name"`
	FullName      string `json:"full_name"`
	Email         string `json:"email"`
	ContactNumber string `json:"contact_number"`
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) (Profile, error) {
	row := q.db.QueryRowContext(ctx, createProfile,
		arg.ID,
		arg.UserID,
		arg.FirstName,
		arg.MiddleName,
		arg.LastName,
		arg.FullName,
		arg.Email,
		arg.ContactNumber,
	)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.FullName,
		&i.Email,
		&i.ContactNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProfile = `-- name: DeleteProfile :exec
DELETE FROM profiles
WHERE id = $1
`

func (q *Queries) DeleteProfile(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteProfile, id)
	return err
}

const getProfile = `-- name: GetProfile :one
SELECT id, user_id, first_name, middle_name, last_name, full_name, email, contact_number, created_at, updated_at FROM profiles
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProfile(ctx context.Context, id string) (Profile, error) {
	row := q.db.QueryRowContext(ctx, getProfile, id)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.FullName,
		&i.Email,
		&i.ContactNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProfileUserID = `-- name: GetProfileUserID :one
SELECT id, user_id, first_name, middle_name, last_name, full_name, email, contact_number, created_at, updated_at FROM profiles
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetProfileUserID(ctx context.Context, userID string) (Profile, error) {
	row := q.db.QueryRowContext(ctx, getProfileUserID, userID)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.FullName,
		&i.Email,
		&i.ContactNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listProfiles = `-- name: ListProfiles :many
SELECT id, user_id, first_name, middle_name, last_name, full_name, email, contact_number, created_at, updated_at FROM profiles
ORDER BY created_at DESC
LIMIT $1
OFFSET $2
`

type ListProfilesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProfiles(ctx context.Context, arg ListProfilesParams) ([]Profile, error) {
	rows, err := q.db.QueryContext(ctx, listProfiles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Profile{}
	for rows.Next() {
		var i Profile
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FirstName,
			&i.MiddleName,
			&i.LastName,
			&i.FullName,
			&i.Email,
			&i.ContactNumber,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProfile = `-- name: UpdateProfile :one
UPDATE profiles
  set updated_at = $2,
  first_name = $3,
  middle_name = $4,
  last_name = $5,
  full_name = $6,
  email = $7,
  contact_number = $8
WHERE id = $1
RETURNING id, user_id, first_name, middle_name, last_name, full_name, email, contact_number, created_at, updated_at
`

type UpdateProfileParams struct {
	ID            string `json:"id"`
	UpdatedAt     string `json:"updated_at"`
	FirstName     string `json:"first_name"`
	MiddleName    string `json:"middle_name"`
	LastName      string `json:"last_name"`
	FullName      string `json:"full_name"`
	Email         string `json:"email"`
	ContactNumber string `json:"contact_number"`
}

func (q *Queries) UpdateProfile(ctx context.Context, arg UpdateProfileParams) (Profile, error) {
	row := q.db.QueryRowContext(ctx, updateProfile,
		arg.ID,
		arg.UpdatedAt,
		arg.FirstName,
		arg.MiddleName,
		arg.LastName,
		arg.FullName,
		arg.Email,
		arg.ContactNumber,
	)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.FullName,
		&i.Email,
		&i.ContactNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateProfileUserID = `-- name: UpdateProfileUserID :one
UPDATE profiles
  set updated_at = $2,
  first_name = $3,
  middle_name = $4,
  last_name = $5,
  full_name = $6,
  email = $7,
  contact_number = $8
WHERE user_id = $1
RETURNING id, user_id, first_name, middle_name, last_name, full_name, email, contact_number, created_at, updated_at
`

type UpdateProfileUserIDParams struct {
	UserID        string `json:"user_id"`
	UpdatedAt     string `json:"updated_at"`
	FirstName     string `json:"first_name"`
	MiddleName    string `json:"middle_name"`
	LastName      string `json:"last_name"`
	FullName      string `json:"full_name"`
	Email         string `json:"email"`
	ContactNumber string `json:"contact_number"`
}

func (q *Queries) UpdateProfileUserID(ctx context.Context, arg UpdateProfileUserIDParams) (Profile, error) {
	row := q.db.QueryRowContext(ctx, updateProfileUserID,
		arg.UserID,
		arg.UpdatedAt,
		arg.FirstName,
		arg.MiddleName,
		arg.LastName,
		arg.FullName,
		arg.Email,
		arg.ContactNumber,
	)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.FullName,
		&i.Email,
		&i.ContactNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
